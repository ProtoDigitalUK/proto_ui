---
import type { InferGetStaticParamsType, GetStaticPaths } from "astro";
// Data
import components, { type ComponentT, parentDetails } from "@/data/components";
// Components
import Layout from "@/layouts/Layout.astro";
import StickySectionLinks from "@/components/blocks/StickySectionLinks.astro";
import Section from "@/components/layout/Section.astro";

export const getStaticPaths = (async () => {
  return components.map((component) => ({
    params: {
      parent: component.parent,
      slug: component.slug,
    },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { parent, slug } = Astro.params as Params;

const component = components.find(
  (comp) => comp.slug === slug && comp.parent === parent
) as ComponentT;
---

<Layout
  meta={{
    title: component.title,
  }}
  hero={{
    title: component.title,
    breadcrumbs: [
      {
        label: parentDetails[parent].title,
        href: `/${parent}`,
      },
      {
        label: component.title,
        href: `/${parent}/${slug}`,
      },
    ],
  }}
>
  <StickySectionLinks
    sections={[
      {
        id: "overview",
        label: "Overview",
      },
      {
        id: "components",
        label: "Components",
      },
      {
        id: "propertise",
        label: "Propertise",
      },
      {
        id: "integration",
        label: "Integration",
      },
      {
        id: "dependencies",
        label: "Dependencies",
      },
    ]}
  />
  <Section>
    {
      component.variations.map((compVariation) => (
        <>
          <iframe
            class="variation-iframe w-px min-w-full"
            src={`/bricks/${slug}/${compVariation.key}`}
            style={{ border: "none" }}
          />
          <pre>{compVariation.raw}</pre>
        </>
      ))
    }
  </Section>
</Layout>

<script>
  import { iframeResizer } from "iframe-resizer";

  iframeResizer({ log: false }, ".variation-iframe");
</script>
